# ===> MIXED HOROVOD AND TENSORFLOW DOCKERFILE

FROM nvidia/cuda:10.0-base-ubuntu18.04
LABEL maintainer="W Ronny Huang <wronnyhuang@gmail.com>"
ARG CUDA=10.0
ENV NCCL_VERSION=2.4.7-1+cuda10.0
# tensorflow's version
ARG CUDNN=7.6.2.24-1
# horovod's version
ARG CUDNN=7.6.0.64-1


# Set default shell to /bin/bash
SHELL ["/bin/bash", "-cu"]

# Pick up some TF dependencies
RUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \
        build-essential \
        cuda-command-line-tools-${CUDA/./-} \
        cuda-cublas-${CUDA/./-} \
        cuda-cufft-${CUDA/./-} \
        cuda-curand-${CUDA/./-} \
        cuda-cusolver-${CUDA/./-} \
        cuda-cusparse-${CUDA/./-} \
        curl \
        libfreetype6-dev \
        libhdf5-serial-dev \
        libzmq3-dev \
        pkg-config \
        software-properties-common \
        unzip \
        cmake \
        g++-4.8 \
        git \
        curl \
        vim \
        wget \
        ca-certificates \
        libcudnn7=${CUDNN}+cuda${CUDA} \
        libnccl2=${NCCL_VERSION} \
        libnccl-dev=${NCCL_VERSION} \
        libjpeg-dev \
        libpng-dev \
        librdmacm1 \
        libibverbs1 \
        ibverbs-providers

RUN apt-get clean && \
    apt-get update && \
    apt-get install -y --no-install-recommends libnvinfer5=5.1.5-1+cuda${CUDA} && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# For CUDA profiling, TensorFlow requires CUPTI.
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# ===> ANACONDA3 DOCKERFILE

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH

RUN apt-get update --fix-missing && apt-get install -y bzip2 ca-certificates \
    libglib2.0-0 libxext6 libsm6 libxrender1 \
    git

RUN wget --quiet https://repo.anaconda.com/archive/Anaconda3-5.3.0-Linux-x86_64.sh -O ~/anaconda.sh && \
    /bin/bash ~/anaconda.sh -b -p /opt/conda && \
    rm ~/anaconda.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

RUN apt-get install -y curl grep sed dpkg && \
#    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` && \
#    curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
#    dpkg -i tini.deb && \
#    rm tini.deb && \
    apt-get clean


# ===> install conda tensorflow-gpu, takes a long time
RUN conda update -n base -c defaults conda
RUN conda install tensorflow-gpu
RUN conda install pytorch torchvision cudatoolkit=10.0 -c pytorch

# ===> Ronny's custom commands

# apt-get packages
RUN apt-get install -y openssh-server && apt-get clean
RUN apt-get install -y xorg && apt-get clean
#RUN apt-get install -y openbox && apt-get clean

# permit root login via ssh
RUN sed -i -e 's/prohibit-password/yes/g' /etc/ssh/sshd_config
RUN service ssh restart
RUN echo 'root:password' | chpasswd

# ===> Force rebuild beyond this point (dont cache)
# Run this command when building or just change the value here
# docker build -t wrhuang/default --build-arg CACHEBUST=$(date +%s) .
ARG CACHEBUST=6

# useful python packages
#RUN pip install opencv-python
#RUN pip install editdistance
#RUN pip install comet_ml
#RUN pip install cometml_api
#RUN pip install sigopt
#RUN pip install tensorboardX
#RUN pip install tensorflow-hub
#RUN pip install tensorflow-probability
#RUN pip install joblib

# pull scripts from github bin and copy .bashrc, .vimrc, and .inputrc
RUN git clone https://github.com/wronnyhuang/bin /root/bin
RUN cp /root/bin/.bashrc /root/
RUN cp /root/bin/.vimrc /root/bin/.inputrc /root/

# install vim plugins
RUN sh /root/bin/install_vundle.sh
RUN sh /root/bin/install_commentary_instructions.sh

# setup scripts for ssh tunneling, aka copy ngrok and nssh into home
RUN cp /root/bin/nsshguest /root/bin/nssh /root/bin/ngrok /root/

# remove bin folder
RUN rm -rf /root/bin

# ===> Install Open MPI
RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.0.tar.gz && \
    tar zxf openmpi-4.0.0.tar.gz && \
    cd openmpi-4.0.0 && \
    ./configure --enable-orterun-prefix-by-default && \
    make -j $(nproc) all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi

# Install Horovod, temporarily using CUDA stubs
RUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \
    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 \
         pip install --no-cache-dir horovod && \
    ldconfig

# Install OpenSSH for MPI to communicate between containers
RUN apt-get install -y --no-install-recommends openssh-client openssh-server && \
    mkdir -p /var/run/sshd

# Allow OpenSSH to talk to containers without asking for confirmation
RUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config

# Download examples
RUN apt-get install -y --no-install-recommends subversion && \
    svn checkout https://github.com/horovod/horovod/trunk/examples && \
    rm -rf /examples/.svn

WORKDIR "/root"
CMD [ "/bin/bash" ]
